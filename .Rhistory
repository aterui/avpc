names(beta) <- NULL
test_that("compare coefficients", {
expect_equal(apcomp(m, u = "x1")$est,
beta[2])
expect_equal(apcomp(m, u = "x2")$est,
beta[3])
expect_equal(apcomp(m, u = "x3b")$est,
beta[4])
})
# setup -------------------------------------------------------------------
context("test lm coefficient equivalency")
pacman::p_load(tidyverse, avpc)
ilogit <- function(x) 1 / (1 + exp(-x))
# test dataset ------------------------------------------------------------
n_sample <- 100
n_group <- 10
x1 = rnorm(n = n_sample)
x2 = rnorm(n = n_sample)
x3 = sample(letters[1:5], size = n_sample, replace = TRUE)
group = gl(n = 10, k = 10)
mat <- model.matrix(model.frame(~ x1 + x2 + x3))
v_b <- runif(n = ncol(mat), -1, 1)
y_norm <- rnorm(n = n_sample,
mean = mat %*% v_b + rnorm(n = n_group)[group],
sd = 1)
# run model ---------------------------------------------------------------
m <- lme4::lmer(y_norm ~ x1 + x2 + x3 + (1|group))
beta <- m@beta
names(beta) <- NULL
# test --------------------------------------------------------------------
test_that("compare coefficients", {
expect_equal(apcomp(m, u = "x1")$est,
beta[2])
expect_equal(apcomp(m, u = "x2")$est,
beta[3])
expect_equal(apcomp(m, u = "x3b")$est,
beta[4])
})
# setup -------------------------------------------------------------------
context("test lmer coefficient equivalency")
pacman::p_load(tidyverse, avpc)
ilogit <- function(x) 1 / (1 + exp(-x))
# test dataset ------------------------------------------------------------
n_sample <- 100
n_group <- 10
x1 = rnorm(n = n_sample)
x2 = rnorm(n = n_sample)
x3 = sample(letters[1:5], size = n_sample, replace = TRUE)
group = gl(n = 10, k = 10)
mat <- model.matrix(model.frame(~ x1*x2 + x3))
v_b <- runif(n = ncol(mat), -1, 1)
y_norm <- rnorm(n = n_sample,
mean = mat %*% v_b + rnorm(n = n_group)[group],
sd = 1)
# run model ---------------------------------------------------------------
m <- lme4::lmer(y_norm ~ x1 + x2 + x3 + (1|group))
beta <- m@beta
names(beta) <- NULL
# test --------------------------------------------------------------------
test_that("compare coefficients", {
expect_equal(apcomp(m, u = "x1")$est,
beta[2])
expect_equal(apcomp(m, u = "x2")$est,
beta[3])
expect_equal(apcomp(m, u = "x3b")$est,
beta[4])
})
# setup -------------------------------------------------------------------
context("test lmer coefficient equivalency")
pacman::p_load(tidyverse, avpc)
ilogit <- function(x) 1 / (1 + exp(-x))
# test dataset ------------------------------------------------------------
n_sample <- 100
n_group <- 10
x1 = rnorm(n = n_sample)
x2 = rnorm(n = n_sample)
x3 = sample(letters[1:5], size = n_sample, replace = TRUE)
group = gl(n = 10, k = 10)
mat <- model.matrix(model.frame(~ x1 + x2 + x3))
v_b <- runif(n = ncol(mat), -1, 1)
y_norm <- rnorm(n = n_sample,
mean = mat %*% v_b + rnorm(n = n_group)[group],
sd = 1)
# run model ---------------------------------------------------------------
m <- lme4::lmer(y_norm ~ x1*x2 + x3 + (1|group))
beta <- m@beta
names(beta) <- NULL
# test --------------------------------------------------------------------
test_that("compare coefficients", {
expect_equal(apcomp(m, u = "x1")$est,
beta[2])
expect_equal(apcomp(m, u = "x2")$est,
beta[3])
expect_equal(apcomp(m, u = "x3b")$est,
beta[4])
})
apcomp(m, u = "x1")
beta[2]
usethis::use_mit_license()
usethis::use_roxygen_md()
usethis::use_package_doc()
devtools::document()
devtools::load_all()
devtools::check()
# setup -------------------------------------------------------------------
context("test lm coefficient equivalency")
pacman::p_load(tidyverse, avpc)
ilogit <- function(x) 1 / (1 + exp(-x))
# test dataset ------------------------------------------------------------
n_sample <- 100
x1 = rnorm(n = n_sample)
x2 = rnorm(n = n_sample)
x3 = sample(letters[1:5], size = n_sample, replace = TRUE)
mat <- stats::model.matrix(model.frame(~ x1 + x2 + x3))
v_b <- runif(n = ncol(mat), -1, 1)
y_norm <- rnorm(n = n_sample, mean = mat %*% v_b, sd = 1)
# run model ---------------------------------------------------------------
m <- lm(y_norm ~ x1 * x2 + x3)
beta <- coef(m)
names(beta) <- NULL
# setup -------------------------------------------------------------------
context("test lm coefficient equivalency")
pacman::p_load(tidyverse, avpc)
ilogit <- function(x) 1 / (1 + exp(-x))
# test dataset ------------------------------------------------------------
n_sample <- 100
x1 = rnorm(n = n_sample)
x2 = rnorm(n = n_sample)
x3 = sample(letters[1:5], size = n_sample, replace = TRUE)
mat <- stats::model.matrix(model.frame(~ x1 + x2 + x3))
v_b <- runif(n = ncol(mat), -1, 1)
y_norm <- rnorm(n = n_sample, mean = mat %*% v_b, sd = 1)
# run model ---------------------------------------------------------------
m <- lm(y_norm ~ x1 * x2 + x3)
beta <- coef(m)
names(beta) <- NULL
m
coef(m)
coef(summary(m))[, "Std. Error"]
# setup -------------------------------------------------------------------
context("test lmer coefficient equivalency")
pacman::p_load(tidyverse, avpc)
ilogit <- function(x) 1 / (1 + exp(-x))
# test dataset ------------------------------------------------------------
n_sample <- 100
n_group <- 10
x1 = rnorm(n = n_sample)
x2 = rnorm(n = n_sample)
x3 = sample(letters[1:5], size = n_sample, replace = TRUE)
group = gl(n = 10, k = 10)
mat <- model.matrix(model.frame(~ x1 + x2 + x3))
v_b <- runif(n = ncol(mat), -1, 1)
y_norm <- rnorm(n = n_sample,
mean = mat %*% v_b + rnorm(n = n_group)[group],
sd = 1)
# run model ---------------------------------------------------------------
m <- lme4::lmer(y_norm ~ x1 * x2 + x3 + (1|group))
beta <- m@beta
names(beta) <- NULL
m
summary(mapply(function, ...))
summary(m)
coef(summary(m))
coef(summary(m))[, 'Estimate']
usethis::use_mit_license()
usethis::use_roxygen_md()
usethis::use_package_doc()
devtools::document()
devtools::load_all()
devtools::check()
lintr::lint_package(avpc)
lintr::lint_package('avpc')
usethis::use_mit_license()
usethis::use_roxygen_md()
usethis::use_package_doc()
devtools::document()
devtools::load_all()
devtools::check()
usethis::use_test(pois-glm)
usethis::use_test("pois-glm")
usethis::use_test("binom-glm")
# setup -------------------------------------------------------------------
context("test lm coefficient equivalency")
pacman::p_load(tidyverse)
ilogit <- function(x) 1 / (1 + exp(-x))
# test dataset ------------------------------------------------------------
n_sample <- 100
x1 <- rnorm(n = n_sample)
x2 <- rnorm(n = n_sample)
x3 <- sample(letters[1:5], size = n_sample, replace = TRUE)
mat <- stats::model.matrix(model.frame(~ x1 + x2 + x3))
v_b <- runif(n = ncol(mat), -1, 1)
y <- rpoism(n = n_sample, lambda = exp(mat %*% v_b))
# setup -------------------------------------------------------------------
context("test lm coefficient equivalency")
pacman::p_load(tidyverse)
ilogit <- function(x) 1 / (1 + exp(-x))
# test dataset ------------------------------------------------------------
n_sample <- 100
x1 <- rnorm(n = n_sample)
x2 <- rnorm(n = n_sample)
x3 <- sample(letters[1:5], size = n_sample, replace = TRUE)
mat <- stats::model.matrix(model.frame(~ x1 + x2 + x3))
v_b <- runif(n = ncol(mat), -1, 1)
y <- rpois(n = n_sample, lambda = exp(mat %*% v_b))
y
avpc
avpc()
devtools::load_all()
avpc()
apcomp(m)
# setup -------------------------------------------------------------------
context("test lm coefficient equivalency")
pacman::p_load(tidyverse)
ilogit <- function(x) 1 / (1 + exp(-x))
# test dataset ------------------------------------------------------------
n_sample <- 100
x1 <- rnorm(n = n_sample)
x2 <- rnorm(n = n_sample)
x3 <- sample(letters[1:5], size = n_sample, replace = TRUE)
mat <- stats::model.matrix(model.frame(~ x1 + x2 + x3))
v_b <- runif(n = ncol(mat), -1, 1)
y <- rpois(n = n_sample, lambda = exp(mat %*% v_b))
# run model ---------------------------------------------------------------
m <- glm(y ~ x1 * x2 + x3, family = poisson)
beta <- coef(m)
apcomp(m, u = 'x1')
apcomp(m, u = 'x1', var_transform = 'identity')
v_b
m
apcomp(m, u = 'x1', var_transform = 'identity')$est
# setup -------------------------------------------------------------------
context("test lm coefficient equivalency")
pacman::p_load(tidyverse)
ilogit <- function(x) 1 / (1 + exp(-x))
# test dataset ------------------------------------------------------------
n_sample <- 100
x1 <- rnorm(n = n_sample)
x2 <- rnorm(n = n_sample)
x3 <- sample(letters[1:5], size = n_sample, replace = TRUE)
mat <- stats::model.matrix(model.frame(~ x1 + x2 + x3))
v_b <- runif(n = ncol(mat), -1, 1)
y <- rpois(n = n_sample, lambda = exp(mat %*% v_b))
# run model ---------------------------------------------------------------
m <- lm(y ~ x1 * x2 + x3)
beta <- coef(m)
names(beta) <- NULL
# test --------------------------------------------------------------------
test_that("compare coefficients", {
expect_equal(apcomp(m, u = "x1", var_transform = "identity")$est,
beta[2])
expect_equal(apcomp(m, u = "x2", var_transform = "identity")$est,
beta[3])
expect_equal(apcomp(m, u = "x3b", var_transform = "identity")$est,
beta[4])
})
# setup -------------------------------------------------------------------
context("test lm coefficient equivalency")
pacman::p_load(tidyverse)
ilogit <- function(x) 1 / (1 + exp(-x))
# test dataset ------------------------------------------------------------
n_sample <- 100
x1 <- rnorm(n = n_sample)
x2 <- rnorm(n = n_sample)
x3 <- sample(letters[1:5], size = n_sample, replace = TRUE)
mat <- stats::model.matrix(model.frame(~ x1 + x2 + x3))
v_b <- runif(n = ncol(mat), -1, 1)
y <- rpois(n = n_sample, lambda = exp(mat %*% v_b))
# run model ---------------------------------------------------------------
m <- glm(y ~ x1 * x2 + x3, family = poisson)
beta <- coef(m)
names(beta) <- NULL
# test --------------------------------------------------------------------
test_that("compare coefficients", {
expect_equal(apcomp(m, u = "x1", var_transform = "identity")$est,
beta[2])
expect_equal(apcomp(m, u = "x2", var_transform = "identity")$est,
beta[3])
expect_equal(apcomp(m, u = "x3b", var_transform = "identity")$est,
beta[4])
})
m
apcomp(m, u = "x1", var_transform = "identity")$est
apcomp(m, u = "x2", var_transform = "identity")$est
# setup -------------------------------------------------------------------
context("test poisson glm coefficient equivalency")
pacman::p_load(tidyverse)
ilogit <- function(x) 1 / (1 + exp(-x))
# test dataset ------------------------------------------------------------
n_sample <- 100
x1 <- rnorm(n = n_sample)
x2 <- rnorm(n = n_sample)
x3 <- sample(letters[1:5], size = n_sample, replace = TRUE)
mat <- stats::model.matrix(model.frame(~ x1 + x2 + x3))
v_b <- runif(n = ncol(mat), -1, 1)
y <- rpois(n = n_sample, size = 1, prob = ilogit(mat %*% v_b))
# run model ---------------------------------------------------------------
m <- glm(y ~ x1 * x2 + x3, family = binomial)
beta <- coef(m)
names(beta) <- NULL
# test --------------------------------------------------------------------
test_that("compare coefficients", {
expect_equal(apcomp(m, u = "x1", var_transform = "identity")$est,
beta[2])
expect_equal(apcomp(m, u = "x2", var_transform = "identity")$est,
beta[3])
expect_equal(apcomp(m, u = "x3b", var_transform = "identity")$est,
beta[4])
})
m
m <- glm(y ~ x1 * x2 + x3, family = binomial)
y <- rbinom(n = n_sample, size = 1, prob = ilogit(mat %*% v_b))
y
# setup -------------------------------------------------------------------
context("test poisson glm coefficient equivalency")
pacman::p_load(tidyverse)
ilogit <- function(x) 1 / (1 + exp(-x))
# test dataset ------------------------------------------------------------
n_sample <- 100
x1 <- rnorm(n = n_sample)
x2 <- rnorm(n = n_sample)
x3 <- sample(letters[1:5], size = n_sample, replace = TRUE)
mat <- stats::model.matrix(model.frame(~ x1 + x2 + x3))
v_b <- runif(n = ncol(mat), -1, 1)
y <- rbinom(n = n_sample, size = 1, prob = ilogit(mat %*% v_b))
# run model ---------------------------------------------------------------
m <- glm(y ~ x1 * x2 + x3, family = binomial)
beta <- coef(m)
names(beta) <- NULL
# test --------------------------------------------------------------------
test_that("compare coefficients", {
expect_equal(apcomp(m, u = "x1", var_transform = "identity")$est,
beta[2])
expect_equal(apcomp(m, u = "x2", var_transform = "identity")$est,
beta[3])
expect_equal(apcomp(m, u = "x3b", var_transform = "identity")$est,
beta[4])
})
m
apcomp(m, u = "x1", var_transform = "identity")$est
usethis::use_test("pois-lmer")
usethis::use_test("binom-glmer")
# setup -------------------------------------------------------------------
context("test lmer coefficient equivalency")
pacman::p_load(tidyverse)
ilogit <- function(x) 1 / (1 + exp(-x))
# test dataset ------------------------------------------------------------
n_sample <- 100
n_group <- 10
x1 <- rnorm(n = n_sample)
x2 <- rnorm(n = n_sample)
x3 <- sample(letters[1:5], size = n_sample, replace = TRUE)
group <- gl(n = 10, k = 10)
mat <- model.matrix(model.frame(~ x1 + x2 + x3))
v_b <- runif(n = ncol(mat), -1, 1)
y <- rpois(n = n_sample,
lamda = exp(mat %*% v_b + rnorm(n = n_group)[group]))
# setup -------------------------------------------------------------------
context("test lmer coefficient equivalency")
pacman::p_load(tidyverse)
ilogit <- function(x) 1 / (1 + exp(-x))
# test dataset ------------------------------------------------------------
n_sample <- 100
n_group <- 10
x1 <- rnorm(n = n_sample)
x2 <- rnorm(n = n_sample)
x3 <- sample(letters[1:5], size = n_sample, replace = TRUE)
group <- gl(n = 10, k = 10)
mat <- model.matrix(model.frame(~ x1 + x2 + x3))
v_b <- runif(n = ncol(mat), -1, 1)
y <- rpois(n = n_sample,
lambda = exp(mat %*% v_b + rnorm(n = n_group)[group]))
y
# setup -------------------------------------------------------------------
context("test lmer coefficient equivalency")
pacman::p_load(tidyverse)
ilogit <- function(x) 1 / (1 + exp(-x))
# test dataset ------------------------------------------------------------
n_sample <- 100
n_group <- 10
x1 <- rnorm(n = n_sample)
x2 <- rnorm(n = n_sample)
x3 <- sample(letters[1:5], size = n_sample, replace = TRUE)
group <- gl(n = 10, k = 10)
mat <- model.matrix(model.frame(~ x1 + x2 + x3))
v_b <- runif(n = ncol(mat), -1, 1)
y <- rpois(n = n_sample,
lambda = exp(mat %*% v_b + rnorm(n = n_group)[group]))
# run model ---------------------------------------------------------------
m <- lme4::glmer(y ~ x1 * x2 + x3 + (1 | group), family = poisson)
beta <- m@beta
names(beta) <- NULL
# test --------------------------------------------------------------------
test_that("compare coefficients", {
expect_equal(apcomp(m, u = "x1")$est,
beta[2])
expect_equal(apcomp(m, u = "x2")$est,
beta[3])
expect_equal(apcomp(m, u = "x3b")$est,
beta[4])
})
# setup -------------------------------------------------------------------
context("test lmer coefficient equivalency")
pacman::p_load(tidyverse)
ilogit <- function(x) 1 / (1 + exp(-x))
# test dataset ------------------------------------------------------------
n_sample <- 100
n_group <- 10
x1 <- rnorm(n = n_sample)
x2 <- rnorm(n = n_sample)
x3 <- sample(letters[1:5], size = n_sample, replace = TRUE)
group <- gl(n = 10, k = 10)
mat <- model.matrix(model.frame(~ x1 + x2 + x3))
v_b <- runif(n = ncol(mat), -1, 1)
y <- rpois(n = n_sample,
lambda = exp(mat %*% v_b + rnorm(n = n_group)[group]))
# run model ---------------------------------------------------------------
m <- lme4::glmer(y ~ x1 * x2 + x3 + (1 | group), family = poisson)
beta <- m@beta
names(beta) <- NULL
# test --------------------------------------------------------------------
test_that("compare coefficients", {
expect_equal(apcomp(m, u = "x1", var_transform = "identity")$est,
beta[2])
expect_equal(apcomp(m, u = "x2", var_transform = "identity")$est,
beta[3])
expect_equal(apcomp(m, u = "x3b", var_transform = "identity")$est,
beta[4])
})
class(m)
m@beta
summary(m)
coef(summary(m))
# setup -------------------------------------------------------------------
context("test binomial glmer coefficient equivalency")
pacman::p_load(tidyverse)
ilogit <- function(x) 1 / (1 + exp(-x))
# test dataset ------------------------------------------------------------
n_sample <- 100
n_group <- 10
x1 <- rnorm(n = n_sample)
x2 <- rnorm(n = n_sample)
x3 <- sample(letters[1:5], size = n_sample, replace = TRUE)
group <- gl(n = 10, k = 10)
mat <- model.matrix(model.frame(~ x1 + x2 + x3))
v_b <- runif(n = ncol(mat), -1, 1)
y <- rbinom(n = n_sample,
size = 1,
prob = ilogit(mat %*% v_b + rnorm(n = n_group)[group]))
# run model ---------------------------------------------------------------
m <- lme4::glmer(y ~ x1 * x2 + x3 + (1 | group), family = binomial)
beta <- m@beta
names(beta) <- NULL
# test --------------------------------------------------------------------
test_that("compare coefficients", {
expect_equal(apcomp(m, u = "x1", var_transform = "identity")$est,
beta[2])
expect_equal(apcomp(m, u = "x2", var_transform = "identity")$est,
beta[3])
expect_equal(apcomp(m, u = "x3b", var_transform = "identity")$est,
beta[4])
})
usethis::use_mit_license()
usethis::use_roxygen_md()
usethis::use_package_doc()
devtools::document()
devtools::load_all()
devtools::check()
m
apcomp(m, u = 'x1')
apcomp(m, u = 'x1', var_transform = 'x')
summary(m)
# setup -------------------------------------------------------------------
context("test poisson glmer coefficient equivalency")
pacman::p_load(tidyverse)
ilogit <- function(x) 1 / (1 + exp(-x))
# test dataset ------------------------------------------------------------
n_sample <- 100
n_group <- 10
x1 <- rnorm(n = n_sample)
x2 <- rnorm(n = n_sample)
x3 <- sample(letters[1:2], size = n_sample, replace = TRUE)
group <- gl(n = 10, k = 10)
mat <- model.matrix(model.frame(~ x1 + x2 * x3))
v_b <- runif(n = ncol(mat), -1, 1)
y <- rpois(n = n_sample,
lambda = exp(mat %*% v_b + rnorm(n = n_group)[group]))
# run model ---------------------------------------------------------------
m <- lme4::glmer(y ~ x1 + x2 * x3 + (1 | group), family = poisson)
beta <- m@beta
names(beta) <- NULL
# test --------------------------------------------------------------------
test_that("compare coefficients", {
expect_equal(apcomp(m, u = "x1", var_transform = "identity")$est,
beta[2])
expect_equal(apcomp(m, u = "x2", var_transform = "identity")$est,
beta[3])
expect_equal(apcomp(m, u = "x3b", var_transform = "identity")$est,
beta[4])
})
apcomp(m, u = "x1", var_transform = "identity")$est
m
apcomp(m, u = "x2:x3b", var_transform = "identity")$est
apcomp(m, u = "x1", var_transform = "identity")
re <- apcomp(m, u = "x1", var_transform = "identity")
View(re$df_uv)
re <- apcomp(m, u = "x2", var_transform = "identity")
re$estimate
re <- apcomp(m, u = "x3", var_transform = "identity")
re <- apcomp(m, u = "x3b", var_transform = "identity")
re$estimate
View(re$df_uv)
